import numpy  as np
import matplotlib.pyplot as plt



X = np.random.normal(loc = 1, scale = 10, size = (1000, 50))
# print(X)
#
# print("----------------------------------------")


#Нормировка матрицы

# Произведите нормировку матрицы из предыдущего задания: вычтите из каждого столбца его среднее значение,
# а затем поделите на его стандартное отклонение.



m = np.mean(X, axis=0)# Функция для вычисления среднего: np.mean

std = np.std(X, axis=0)# Функция для вычисления стандартного отклонения: np.std

X_norm = ((X - m) / std)

# print(X_norm)



# Операции над элементами матрицы

Z = np.array([[4, 5, 0],
             [1, 9, 3],
             [5, 1, 1],
             [3, 3, 3],
             [9, 9, 9],
             [4, 7, 1]])



r = np.sum(Z, axis= 1)
# print (r)
# print (np.nonzero(r > 10))

A = np.eye(3)
B = np.eye(3)
AB = np.vstack((A, B))
print(AB)


print("--------------------------------------------Работаем с базовыми классами Numphy----------------------------------")

Z = np.zeros(10)
print(Z)
print("1----------------------------------------")

Z = np.ones(10)
print (Z)
print("2----------------------------------------")

Z = np.full(10, 29)
print(Z)
print("3----------------------------------------")


Z = np.arange(10, 50)
print(Z)
print("4----------------------------------------")

#Создать матрицу (двумерный массив) 3x3 со значениями от 0 до 8

Z = np.arange(9).reshape(3, 3)
print(Z)

#Развернуть вектор (первый становится последним)

Z = np.arange(50)
print(Z[:: -1])
print("5----------------------------------------")

#Двумерный массив от 1ого до 9

Z = np.arange(9).reshape(3, 3)
print(Z)
print("6----------------------------------------")

#Создать 3x3 единичную матрицу

Z = np.eye(3)
print(Z)
print("7----------------------------------------")

#Создать массив 10x10 со случайными значениями, найти минимум и максимум

Z = np.random.random((10, 10))
Zmin, Zmax = Z.min(), Z.max()
print("Zmin = ", Zmin, "Zmax = ", Zmax)
print("8----------------------------------------")

# Создать случайный вектор размера 30 и найти среднее значение всех элементов

Z = np.random.random(30)
Z = np.arange(10)
m = Z.mean()
print(m)
print("9----------------------------------------")

#Создать матрицу с 0 внутри, и 1 на границах

Z = np.ones((10, 10))
Z[1:-1, 1:-1] = 0
print(Z)

#Создать 5x5 матрицу с 1,2,3,4 под диагональю

Z = np.diag(np.arange(1, 5), k = 0)
print(Z)
print("10----------------------------------------")

#Создать 8x8 матрицу и заполнить её в шахматном порядке

Z = np.zeros((8, 8), dtype=int)
Z[1::2, ::2] = 1
Z[::2, 1::2] = 1
print(Z)
print("11----------------------------------------")

#Создать 8x8 матрицу и заполнить её в шахматном порядке, используя функцию tile

Z = np.tile(np.array([[0, 1], [1, 0]]), (4, 4))
print(Z)
print("12----------------------------------------")

#Перемножить матрицы 5x3 и 3x2

Z = np.dot(np.ones((5, 3)), np.ones((3, 2)))
print(Z)
print("13----------------------------------------")

#Дан массив, поменять знак у элементов, значения которых между 3 и 8

Z = np.arange(11)
print(Z)
Z[(Z > 3) & (Z <= 8)] *= -1
print(Z)
print("14----------------------------------------")

#Сделать массив неизменяемым
Z = np.zeros(10)
Z.flags.writeable = False

#Дан массив 10x2 (точки в декартовой системе координат), преобразовать в полярную

Z = np.random.random((10, 2))
X, Y = Z[:, 0], Z[:, 1]
R = np.hypot(X, Y)
T = np.arctan2(Y, X)
print(R)
print(T)

#Заменить максимальный элемент на ноль

Z = np.random.random(10)
Z[Z.argmax()] = 0
print(Z)

x = np.linspace(0, 3, 20)
y = np.linspace(0, 9, 20)
plt.plot(x, y)       # line plot
plt.show()           # <-- shows the plot (not needed with pylab)